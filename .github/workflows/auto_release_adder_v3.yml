name: "Auto Release Adder"
on:
  pull_request:
    types: [closed]
    branches:
      - production
jobs:
  auto_release_adder:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout The PR
        uses: actions/checkout@v4

      - name: Get Version From PR
        id: get_version
        run: kotlinc -script .github/scripts/auto_release_adder.kts "${{ github.event.pull_request.body }}"

      - name: Show Fail Log
        if: ${{ steps.create_release_body.outputs.release_version == 'NO_VERSION' }}
        run: |
           if [ "${{ steps.create_release_body.outputs.release_version }}" == "NO_VERSION" ]; then
            echo "Fail: Could not found the version code "
           fi
           exit 1
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get Latest Release Tag
        id: latest_tag
        run: |
          TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV
      
      - name: Get Commit Date of Latest Tag
        id: tag_date
        run: |
          RELEASE_DATE=$(gh release view "$LATEST_TAG" --json createdAt --jq .createdAt)
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV

      - name: Create body
        id: create_body
        run: |
          # 실제 release note 몸체 데이터
          BODY=""

          # 팀별 TITLE (작성용)
          CAMPUS_TITLE="## Campus \\n"
          BUSINESS_TITLE="## Business \\n"
          USER_TITLE="## User \\n"
          KOIN_PROJECT_TITLE="## Koin Project 전반 \\n"

          # 팀별 TAG (감지용)
          CAMPUS_TAG="campus"
          BUSINESS_TAG="business"
          USER_TAG="user"
          KOIN_PROJECT_TAG="koin project"
          
          # 작업별 TITLE (작성용)
          FEATURE_TITLE="### Feature \\n"
          BUG_TITLE="### Bug \\n"
          REFECTOR_TITLE="### Refactor \\n"
          CHORE_TITLE="### Chore \\n"
          
          # 작업별 TAG (감지용)
          FEATURE_TAG="feature"
          BUG_TAG="bug"
          REFECTOR_TAG="refactor"
          CHORE_TAG="chore"
          
          # 2개의 태그가 모두 있는 PR 추출, 반환
          fetch_prs() {
            local tag_1=$1
            local tag_2=$2
            local title=$3
            local searched_prs=$(gh pr list \
              --state merged \
              --label "$tag_1" \
              --label "$tag_2" \
              --search "merged:>${{ env.RELEASE_DATE }}" \
              --json number,title,author,labels \
              --jq '[.[] | select((.labels | map(.name) | index("'"$tag_1"'")) and (.labels | map(.name) | index("'"$tag_2"'"))) | "- " + .title + " #" + (.number|tostring) + " @" + .author.login] | join("\\n")')
            # 내용이 없으면 작성 안함
            if [ -n "$searched_prs" ]; then
              searched_prs="$title$searched_prs\\n"
            fi
            echo "$searched_prs"
          }
          
          # 해당 팀과 관련된 모든 PR 추출, BODY 작성
          add_team_body() {
            local team_tag=$1
            local team_title=$2
            local team_body="$(fetch_prs "$team_tag" "$FEATURE_TAG" "$FEATURE_TITLE")$(fetch_prs "$team_tag" "$BUG_TAG" "$BUG_TITLE")$(fetch_prs "$team_tag" "$REFECTOR_TAG" "$REFECTOR_TITLE")$(fetch_prs "$team_tag" "$CHORE_TAG" "$CHORE_TITLE")"
            # 내용이 없으면 작성 안함
            if [ -n "$team_body" ]; then
              BODY="$BODY$team_title$team_body\\n"
            fi
          }
          
          # 캠퍼스팀 body 작성
          add_team_body "$CAMPUS_TAG" "$CAMPUS_TITLE"
          
          # 비지니스팀 body 작성
          add_team_body "$BUSINESS_TAG" "$BUSINESS_TITLE"

          # 유저팀 body 작성
          add_team_body "$USER_TAG" "$USER_TITLE"

          # 코인 전반 body 작성
          add_team_body "$KOIN_PROJECT_TAG" "$KOIN_PROJECT_TITLE"
          
          # 내용을 OUTPUT에 저장 (해당 BODY 가 최종본)
          echo "body=$BODY\n" >> $GITHUB_OUTPUT

      - name: Create Release
        run: |
          tag="${{ steps.get_version.outputs.release_version }}"
          title="$tag"
          body="${{ steps.create_body.outputs.body }}"
          echo "Version: $tag"
          echo "Body: $body"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d "{
              \"tag_name\": \"$tag\",
              \"target_commitish\": \"production\",
              \"name\": \"$title\",
              \"body\": \"$body\",
              \"draft\": false,
              \"prerelease\": false,
              \"generate_release_notes\": false
            }"