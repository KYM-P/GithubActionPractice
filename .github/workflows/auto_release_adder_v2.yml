name: "Auto Release Adder"
on:
  pull_request:
    types: [closed]
    branches:
      - production
jobs:
  auto_release_adder:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout The PR
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: production

      - name: Get Version From PR
        id: get_version
        run: kotlinc -script .github/scripts/auto_release_adder.kts "${{ github.event.pull_request.body }}"

      - name: Show Fail Log
        if: ${{ steps.create_release_body.outputs.release_version == 'NO_VERSION' }}
        run: |
          if [ "${{ steps.create_release_body.outputs.release_version }}" == "NO_VERSION" ]; then
           echo "Fail: Could not found the version code "
          fi
          exit 1
      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get Latest Release Tag
        id: latest_tag
        run: |
          TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "LATEST_TAG : $TAG"
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Get Commit Date of Latest Tag
        id: tag_date
        run: |
          RELEASE_DATE=$(gh release view "$LATEST_TAG" --json createdAt --jq .createdAt)
          echo "RELEASE_DATE : $RELEASE_DATE"
          echo "RELEASE_DATE=$RELEASE_DATE" >> $GITHUB_ENV

      - name: Get PR Numbers
        id: pr_numbers
        run: |
          NOW_PR_NUMBERS=$(gh pr list \
          --state all \
          --search "created:>=${{ env.RELEASE_DATE }}" \
          --json number \
          --jq '[.[].number] | join(",")')
          echo "NOW_PR_NUMBERS : $NOW_PR_NUMBERS"
          
          BEFORE_TAG="not in production"
          BEFORE_PR_NUMBERS=$(gh pr list \
          --state all \
          --label "$BEFORE_TAG" \
          --json number \
          --jq '[.[].number] | join(",")')
          echo "BEFORE_PR_NUMBERS : $BEFORE_PR_NUMBERS"
          
          PR_NUMBERS="${NOW_PR_NUMBERS},${BEFORE_PR_NUMBERS}"
          echo "PR_NUMBERS=$PR_NUMBERS" >> $GITHUB_ENV

      - name: Check In Production PR
        id: check_in_production
        env:
          PR_NUMBERS: ${{ env.PR_NUMBERS }}
        run: |
          BEFORE_TAG="not in production"
          IN_PRODUCTION_PRS=""
          IFS=',' read -r -a PR_ARRAY <<< "$PR_NUMBERS"
          for pr_number in "${PR_ARRAY[@]}"; do
            commit_sha=$(gh pr view $pr_number --json commits --jq '.commits[-1].oid')
            if git merge-base --is-ancestor $commit_sha origin/production; then
              IN_PRODUCTION_PR="${IN_PRODUCTION_PRS},${pr_number}"
              gh pr edit $pr_number --remove-label "not in production"
            else
              gh pr edit $pr_number --add-label "not in production"
            fi
          done
          
          echo "IN_PRODUCTION_PRS : $IN_PRODUCTION_PRS"
          echo "IN_PRODUCTION_PRS=$IN_PRODUCTION_PRS" >> $GITHUB_ENV